Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, print[-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Input:
The first line contains two integers n(number of elements in the array) and target The second line contains n integers (value of elements in the array)
Output:
Print a single number â€” the minimum integer number of seconds that Valeric and Valerko must wait to watch football without pauses.
Constraints:
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non-decreasing array.
-10^9 <= target <= 10^9

Sample Input 1
6 8
5 7 7 8 8 10
Sample Output 1
3 4

Sample Input 2
6 6
5 7 7 8 8 10
Sample Output 2
-1 -1

import java.util.*;
public class Main
{
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int target = sc.nextInt();
		int [] arr = new int[n];
		for(int i=0; i<n; i++){
		    arr[i]=sc.nextInt();
		}
		int index1 = -1;
	    for(int i=0; i<n; i++){
	        if(arr[i]==target){
	            index1=i;
	            break;
	        }
	    }
	    int index2 = -1;
	    for(int i=n-1; i>0; i--){
	        if(arr[i]==target){
	            index2=i;
	            break;
	        }
	    }
	   System.out.print(index1+" ");
	   System.out.print(index2);
      // System.out.println(index1 + " "+ index2);
	    
	}
}
